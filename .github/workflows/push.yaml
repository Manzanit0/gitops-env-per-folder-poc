name: Automated Release


# For the sake of the Demo, just track these two files. This avoid recursive
# calling: the release is pushing a change to master on the chart files.
on:
  push:
    branches:
      - master
    paths:
      - ".github/**/*"
      - "readme.md"

jobs:
  release_staging:
    runs-on: ubuntu-latest
    environment: staging
    name: Release to Staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
          token: ${{ secrets.WORKFLOW_PAT }}


      - name: Get current chart version
        id: current_version
        run: |
          echo "chart_version=$(yq '.version' staging/foo/Chart.yaml)" >> $GITHUB_OUTPUT
          echo "app_version=$(yq '.appVersion' staging/foo/Chart.yaml)" >> $GITHUB_OUTPUT

      - name: Calculate next chart version
        uses: technicallyjosh/next-version-action@v1
        id: chart_version
        with:
          version: ${{ steps.current_version.outputs.chart_version }}
          type: minor 

      - name: Calculate next app version
        uses: technicallyjosh/next-version-action@v1
        id: app_version
        with:
          version: ${{ steps.current_version.outputs.app_version }}
          type: minor 

      - name: Create branch with release changes
        id: promote_changes
        shell: bash
        run: |
          yq -i '.version = "${{ steps.chart_version.outputs.next_version }}"' staging/foo/Chart.yaml
          yq -i '.appVersion = "${{ steps.app_version.outputs.next_version}}"' staging/foo/Chart.yaml

          if [[ "$(git status --porcelain)" != "" ]]; then 
            git config --global user.email "${GITHUB_ACTOR}"
            git config --global user.name "${GITHUB_ACTOR}@users.noreply.github.com"

            git add .
            git commit -m "Deploy service foo to staging"
            git push -u origin HEAD
          fi

  release_production:
    runs-on: ubuntu-latest
    environment: production
    name: Release to production
    needs:
      - release_staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
          token: ${{ secrets.WORKFLOW_PAT }}

      - name: Create branch with promotion changes
        shell: bash
        run: |
          cp staging/foo/Chart.yaml production/foo/Chart.yaml 

          if [[ "$(git status --porcelain)" != "" ]]; then 
            git config --global user.email "${GITHUB_ACTOR}"
            git config --global user.name "${GITHUB_ACTOR}@users.noreply.github.com"

            # We need to pull because the release_staging job pushed some changes.
            git pull
            git add .
            git commit -m "Deploy service foo to production"
            git push -u origin HEAD
          fi
